"""
Django settings for sense_maker project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import logging
import os
from pathlib import Path

import boto3
import environ

from boiler_plate.utility.constants import APP_CONFIG_PATH, MOM_UPLOAD_DIR
from boiler_plate.utility.read_yaml import ReadYaml

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

log_yaml = ReadYaml(BASE_DIR / APP_CONFIG_PATH["log"])
log_params = log_yaml.get_applicable_log_config()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-1)arhy!su1msgt0x5xs=5g-nndc&p-31r$cyvyp(hhhrg@gu(@"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "rest_api.apps.RestApiConfig",
    "django_apscheduler",
    "authorize.apps.OauthuserConfig",
    "storages",
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "sense_maker.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "sense_maker.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    # "default": {
    #     "ENGINE": "django.db.backends.sqlite3",
    #     "NAME": BASE_DIR.parent / "db.sqlite3",
    # }
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "momdev",
        "USER": "srcmomdev",
        "PASSWORD": "F3C#XPWm-E-#5wf9",
        "HOST": "aamsql-apm1008638-devcl02.cluster-ckkjwfxrnuox.us-east-1.rds.amazonaws.com",
        "PORT": "3306",
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": log_params["level"],
            "class": log_params["class"],
            "filename": log_params["filename"],
            "formatter": "verbose",
        },
    },
    "loggers": {
        "file": {
            "handlers": ["file"],
            "level": log_params["level"],
            "propagate": log_params["propagate"],
        },
    },
}

HOST = "http://localhost:3000"

CORS_ORIGIN_ALLOW_ALL = True
# CORS_ALLOWED_ORIGINS = [
#     HOST,
# ]

# ALLOWED_CIDR_NETS = [
#     "10.0.0.0/8",
#     "100.0.0.0/8",
# ]

SUMMARIZER_API_BASE_URL = "http://localhost:8000/"
DIARIZATION_API_BASE_URL = "http://localhost:8001/"
S2T_API_BASE_URL = "http://localhost:8002/"
CLASSIFIERS_API_BASE_URL = "http://localhost:8003/"
KEYFRAME_API_BASE_URL = "http://localhost:8004/"

# Pratilipi custom user wrapper
AUTH_USER_MODEL = "authorize.CustomUser"

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "authorize.appauthentication.AppAuthentication",
    ),
}


# S3 Config
for name in logging.Logger.manager.loggerDict.keys():
    if ("boto" in name) or ("urllib3" in name):
        logging.getLogger(name).setLevel(logging.WARNING)

USE_S3 = True
AWS_S3_VERIFY = True
AWS_DEFAULT_ACL = None
AWS_QUERYSTRING_AUTH = False
AWS_S3_FILE_OVERWRITE = True
AWS_STORAGE_BUCKET_NAME = "mom-bucket-uat"
AWS_S3_CUSTOM_DOMAIN = f"s3://{AWS_STORAGE_BUCKET_NAME}"
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

# Upload Size
MAX_UPLOAD_SIZE = "2621440"
